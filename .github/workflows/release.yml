name: Build & Release

on:
  push:
    tags:
      - 'v*'                # Run on version tags
    branches:
      - 'github-actions'    # Run on github-actions branch (for testing)
  workflow_dispatch:        # Allow manual builds via GitHub UI (no release)

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Set version and write version file
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            echo "${{ github.ref_name }}" > code2clip_version.txt
          else
            echo "${{ github.sha }}" | cut -c1-8 > code2clip_version.txt
          fi
        shell: bash

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller
        shell: bash

      - name: Build executable
        run: |
          pyinstaller --clean --noconfirm code2clip.spec
        shell: bash

      - name: Package for target OS
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            APP_NAME=Code2Clip
            APP_DIR=dist/$APP_NAME.app
            BIN=dist/code2clip/code2clip   # ← onedir output

            mkdir -p "$APP_DIR/Contents/MacOS"
            mkdir -p "$APP_DIR/Contents/Resources"

            mv "$BIN" "$APP_DIR/Contents/MacOS/code2clip"
            chmod +x "$APP_DIR/Contents/MacOS/code2clip"

            cp packaging/macos/Info.plist "$APP_DIR/Contents/Info.plist"

            cd dist
            zip -r Code2Clip-macos.zip Code2Clip.app
            cd ..
            echo "BINARY_PATH=dist/Code2Clip-macos.zip" >> $GITHUB_ENV

          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            # zip the onedir for convenience
            cd dist
            zip -r code2clip-linux.zip code2clip
            cd ..
            echo "BINARY_PATH=dist/code2clip-linux.zip" >> $GITHUB_ENV

          else
            # Windows: zip the onedir folder (includes code2clip.exe)
            cd dist
            powershell -Command "Compress-Archive -Path code2clip -DestinationPath Code2Clip-windows.zip"
            cd ..
            echo "BINARY_PATH=dist/Code2Clip-windows.zip" >> $GITHUB_ENV
        shell: bash

      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: Code2Clip-${{ matrix.os }}
          path: ${{ env.BINARY_PATH }}
          compression-level: 0
          if-no-files-found: error
  build-intel-macos:
    runs-on: macos-13
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Set version and write version file
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            echo "${{ github.ref_name }}" > code2clip_version.txt
          else
            echo "${{ github.sha }}" | cut -c1-8 > code2clip_version.txt
          fi
        shell: bash

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller

      - name: Build Intel binary
        run: |
          pyinstaller --clean --noconfirm code2clip.spec

      - name: Package Intel macOS app
        run: |
          APP_NAME=Code2Clip
          APP_DIR=dist/$APP_NAME.app
          mkdir -p "$APP_DIR/Contents/MacOS"
          mkdir -p "$APP_DIR/Contents/Resources"
          mv dist/code2clip "$APP_DIR/Contents/MacOS/code2clip"
          chmod +x "$APP_DIR/Contents/MacOS/code2clip"
          cp packaging/macos/Info.plist "$APP_DIR/Contents/Info.plist"
          cd dist
          zip -r Code2Clip-macos-intel.zip Code2Clip.app
          cd ..
          echo "BINARY_PATH=dist/Code2Clip-macos-intel.zip" >> $GITHUB_ENV

      - name: Upload Intel macOS app
        uses: actions/upload-artifact@v4
        with:
          name: Code2Clip-macos-intel
          path: ${{ env.BINARY_PATH }}

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries
          merge-multiple: true

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: binaries/**
          token: ${{ secrets.GH_PAT }}
